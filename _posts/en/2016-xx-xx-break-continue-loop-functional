layout: post

title: Breaking or continuing loop in functional programming
tip-number: XX
tip-username: vamshisuram
tip-username-profile: https://github.com/vamshisuram
tip-tldr:  Uses __.some__ and __.every__ functions


categories:
    - en
---

Lets look at a typical for loop

```javascript
var a = [0, 1, 2, 3, 4];
for (var i = 0; i < a.length; i++) {
    if (a[i] === 2) {
        continue;
    }
    console.log(a[i]);
}
// output
// 0, 1, 3, 4

for (var i = 0; i < a.length; i++) {
    if (a[i] === 2) {
        break;
    }
    console.log(a[i]);
}
// output
// 0, 1
```

Lets do it in using .some

__.some__ is a method on Array prototype, which checks if code execution on any value is returning true. Then it stops executing.

```javascript
// continue
a.some(function(val, i) {
    if (val === 2) {
        return;
    }
    console.log(val); // your code
});
// output
// 0, 1, 3, 4


// break
a.some(function(val, i) {
    if (val === 2) {
        return true;
    }
    console.log(val); // your code
});
// output
// 0, 1
```

You keep returning false to make it move to next input. When you return __true__, the loop will stop. The return value of __a.some(..)__ will hold true, if any of the inside conditions return true.

```javascript
// break
var isTwoPresent = a.some(function(val, i) {
    if (val === 2) {
        return true;
    }
});
console.log(isTwoPresent);
// output
// true
```

Also there is __.every__, which can be used. We have to return the opposite boolean compared to __.some__.
