layout: post

title: Breaking or continuing loop in functional programming
tip-number: XX
tip-username: vamshisuram
tip-username-profile: https://github.com/vamshisuram
tip-tldr:  Uses __.some__ and __.every__ functions


categories:
    - en
---


A common requirement of iteration is cancelation.

Using __for__ loops we can `break` to end iteration early.
```javascript
var a = [0, 1, 2, 3, 4];
for (var i = 0; i < a.length; i++) {
    if (a[i] === 2) {
        break; // stop the loop
    }
    console.log(a[i]);
}
//> 0, 1
```

Another common requirement is to close over our variables.

A quick approach is to use __.forEach__ but
then we lack the ability to `break`. In this situation the closest we get is `continue` functionality through `return`.

```javascript
a.forEach(function(val, index, arr) {
    if (val === 2) {
        // how do we stop?
        return true;
    }
});
//> 0, 1, 3, 4
```

Using __.some__ we get iteration functionally similar to __.forEach__ but with the ability to `break` through `return` instead.
```javascript
a.some(function(val, i) {
    if (val === 2) {
        return true;
    }
    console.log(val); // your code
});
//> 0, 1
//> true
```


You keep returning `false` to make it `continue` to next input. When you return `true`, the loop will `break` and __a.some(..)__ will `return` `true`.

```javascript
// Array contains 2
var isTwoPresent = a.some(function(val, i) {
    if (val === 2) {
        return true; // break
    }
});
console.log(isTwoPresent);
//> true
```

Also there is __.every__, which can be used. We have to return the opposite boolean compared to __.some__.
